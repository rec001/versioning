<?php
/**
 * @file
 *   Callback function for customizing article.
 */


/**
 * Implements hook_menu().
 */
function versioning_article_menu() {
  $items = array();
  $items['node/%node/version'] = array(
    'title' => t('Node Version'),
    'description' => 'Node Version',
    'page callback' => 'nodes_versions',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function versioning_article_form_alter(&$form, &$form_state, $form_id) {

  $args = arg();
  if ($form_id == 'raptor_article_node_form') {
    module_load_include('inc', 'versioning_article', 'ArticleForm.class');
    $articleForm = new ArticleForm($form);
    if (!empty($args[2]) && $args[2] == 'clone') {
      // Node is being cloned.
      $articleForm->alterArticleForm(TRUE);
    }
    else {
      // Node is being inserted, and not cloned.
      $articleForm->alterArticleForm(FALSE);
    }
    $form = $articleForm->getForm();
  }
}

/**
 * Custom submit handler for the article clone form.
 *
 * If the Version field is set to Global.
 */
function versioning_article_submithandler($form, &$form_state) {
  if (isset($form_state['globalredirect']['#value']) && $form_state['globalredirect']['#value']) {
    unset($_REQUEST['destination']);
    unset($form['#redirect']);
    $base_article_nid = $form_state['globalredirect']['#value'];
    $form_state['redirect'] = 'editable-versioned-articles/' . $base_article_nid;
  }
}

/**
 * Custom validate handler for the article clone form.
 *
 * If the Version field is set to Defined and both Min Version and Max Version fields are set to something other than
 * None, then make sure that Max Version > Min Version.
 */
function versioning_article_validate($form, &$form_state) {
  module_load_include('inc', 'versioning_article', 'ArticleForm.class');
  $articleForm = new ArticleForm($form, $form_state);
  $errors = $articleForm->validateArticleCloneForm();
  $form_state = $articleForm->getFormState();

  foreach ($errors as $error) {
    form_set_error($error[0], $error[1]);
  }
}


/**
 * Implements hook_node_insert().
 */
function versioning_article_node_insert($node) {

  if ($node->type != 'raptor_article') {
    return;
  }

  module_load_include('inc', 'versioning_article', 'Article.class');
  $article = new Article($node);

  $arg = arg();
  // If the current article is not being cloned, then set its base article id to be the same as its nid.
  if (!empty($arg[2]) && $arg[2] != 'clone') {

    // Set the base article id to be the same as the current node id.
    $article->setBaseArticleId($node->nid);

    // Save the node. This shouldn't be a recursive call since we are updating the node and not inserting it.
    $node = $article->getArticle();
    field_attach_update('node', $node);
  }

  // If the new node is published and the Version field is set to Defined then
  // Take the Min Version of the new node. Set this value to be the Max version of the node that we are cloning.
  // Save the old node. This way the Min Version of the new node = Max Version of the old node.
  if (($original_nid = $article->getCloneFromOriginalArticleId()) && ($article->getVersionField() == 'defined') &&
    $article->isPublished()
  ) {

    // Get the min version of the new node.
    $min_version_tid = $article->getMinVersionTermId();

    // Get the base node.
    $original_node = node_load($original_nid);
    $originalArticle = new Article($original_node);

    // Set the max version of the original node to be the min version of the new node.
    $originalArticle->setMaxVersionTermId($min_version_tid);

    // Save the original node.
    $original_node = $originalArticle->getArticle();
    node_save($original_node);


    // Set the versions of the original node while creating a clone.
    $originalArticle->getVersionsForDefined();

    // Save the original node.
    $original_node = $originalArticle->getArticle();
    node_save($original_node);
  }

  // Set the versions of the original node while creating a clone.
  if (($original_nid = $article->getCloneFromOriginalArticleId()) && ($article->getVersionField() == 'global') &&
    $article->isPublished()
  ) {
    // Get the base node.
    $original_node = node_load($original_nid);
    $originalArticle = new Article($original_node);

    // Set versions for base node
    $originalArticle->getVersionsForGlobal();

    // Save the original node.
    $original_node = $originalArticle->getArticle();
    node_save($original_node);
  }
}

/**
 * Implements hook_node_update().
 */
function versioning_article_node_update($node) {

  if ($node->type != 'raptor_article') {
    return;
  }

  module_load_include('inc', 'versioning_article', 'Article.class');
  $article = new Article($node);

  // If the new node is published and the Version field is set to Defined then
  // Take the Min Version of the new node. Set this value to be the Max version of the node that we are cloning.
  // Save the old node. This way the Min Version of the new node = Max Version of the old node.
  if (($original_nid = $article->getCloneFromOriginalArticleId()) && ($article->getVersionField() == 'defined') &&
    $article->isPublished()
  ) {

    // Get the base node.
    $original_node = node_load($original_nid);
    $originalArticle = new Article($original_node);

    // Set the versions of the original node while creating a clone.
    $originalArticle->getVersionsForDefined();

    // Save the original node.
    $original_node = $originalArticle->getArticle();
    node_save($original_node);
  }

  // Set the versions of the original node while creating a clone.
  if (($original_nid = $article->getCloneFromOriginalArticleId()) && ($article->getVersionField() == 'global') &&
    $article->isPublished()
  ) {
    // Get the base node.
    $original_node = node_load($original_nid);
    $originalArticle = new Article($original_node);

    // Set versions for base node
    $originalArticle->getVersionsForGlobal();

    // Save the original node.
    $original_node = $originalArticle->getArticle();
    node_save($original_node);
  }
}

/**
 * Implements hook_node_validate().
 */
function versioning_article_node_validate($node, $form, &$form_state) {
  if ($node->type != 'raptor_article') {
    return;
  }

  module_load_include('inc', 'versioning_article', 'Article.class');
  $article = new Article($node);

  //If the current article being saved is unpublished then don't do anything.
  //If the Version field is set to Global, then get the base article id.
  //If the base article id is not empty and is not the same as current node id, then get all the other nodes with the same base article id.
  //If there is at least one such article other than the current one, change the status of the current article to unpublished.
  //After saving the article, redirect the user to /editable-versioned-articles/%node
  $base_article_nid = '';
  if ($article->getVersionField() == 'global' && $node->status == 1) {
    if ($article->getBaseArticleId() && $article->getBaseArticleId() != $node->nid) {
      $base_article_nid = $article->isGlobalVersion();
      if ($base_article_nid) {

        //module_load_include('inc', 'versioning_article', 'ArticleForm.class');
        //$articleForm = new ArticleForm($form, $form_state);

        $form_state['globalredirect'] = array(
          '#type' => 'value',
          '#value' => $base_article_nid,
        );
        // unpublished current node
        $form_state['values']['status'] = 0;
        drupal_set_message(t('A published article with global scope already exists. So we have unpublished the current article and saved it.'));
      }
    }
  }

  //If the current article being saved is unpublished then don't do anything.
  //If the version field is set to Defined, then get the base article id.
  //Get all the published articles who share the same base article id and whose version field is set to Defined. 
  //Exclude the article from which the current article is being cloned. 
  //Now compare the range of versions that the current article is valid vs the range of versions for which the articles obtained in step 3 are valid. 
  //Change the status of the current article to unpublished if there is a conflict in the version ranges.
  //If there is a conflict, then redirect the user to /editable-versioned-articles/ after saving the article.
  if ($article->getVersionField() == 'defined' && $node->status == 1) {
    if ($article->getBaseArticleId() && $article->getBaseArticleId() != $node->nid) {
      $base_article_nid = $article->isDefinedHasConflictVersion();
      if ($base_article_nid) {
        $form_state['globalredirect'] = array(
          '#type' => 'value',
          '#value' => $base_article_nid,
        );
        // unpublished current node
        $form_state['values']['status'] = 0;
        drupal_set_message(t('The version numbers of your current article conflicts with those of other articles. As a result, we have unpublished your current article.'));
      }
    }
  }
}


/**
 * Implements hook_node_presave().
 */
function versioning_article_node_presave($node) {
  if ($node->type != 'raptor_article') {
    return;
  }

  module_load_include('inc', 'versioning_article', 'Article.class');
  $article = new Article($node);

  //if the article is published and the Version field is set to Defined or Global, 
  //then find out which all versions it applies to.
  if ($node->status == 1 && $article->getVersionField() == 'defined') {
    $article->getVersionsForDefined();
  }
  else {
    if ($node->status == 1 && $article->getVersionField() == 'global') {
      $article->getVersionsForGlobal();
    }
  }

}


/**
 * Implements hook_block_info().
 *
 */
function versioning_article_block_info() {
  // Create an array that will hold our blocks
  $blocks = array();
  $blocks['raptor_version'] = array(
    'info' => t('Raptor Version'),
    'status' => TRUE,
    'weight' => 0,
    'region' => -1,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function versioning_article_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'raptor_version':
      $block['subject'] = t('Set Raptor Version');
      $block['content'] = drupal_get_form('raptor_version_form');
      break;
  }
  return $block;
}


/**
 * Implements hook_permission().
 */
function versioning_article_permission() {
  return array(
    'access raptor articles unpublished versions' => array(
      'title' => t('Access Raptor Articles of Unpublished Versions'),
      'description' => t('Access raptor articles of unpublished versions.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function versioning_article_node_access($node, $op, $account) {
  if (is_object($node)) {
    if ($node->type != 'raptor_article') {
      return;
    }

    //When $op = 'view' or 'update', look at the above permission. If the user has permission, then return NODE_ACCESS_ALLOW.
    if ($node->type == 'raptor_article' && ($op == 'view' || $op == 'update')) {
      if (user_access('access raptor articles unpublished versions')) {
        return NODE_ACCESS_ALLOW;
      }
      //If the user does not have the above permission, then check all the versions higher than or equal to min version and lower than (not equal to) max version.
      //If min version is set to None, then check all the versions from the lowest to one less than the max version.
      //If max version is set to None, then check all version from min version to the highest version.
      //If field_published of any version is checked, then return NODE_ACCESS_ALLOW. Otherwise return NODE_ACCESS_DENY.
      else {

        module_load_include('inc', 'versioning_article', 'Article.class');
        $article = new Article($node);

        if ($article->accessRaptorArticle()) {
          return NODE_ACCESS_ALLOW;
        }
        else {
          return NODE_ACCESS_DENY;
        }
      }
    }
  }
  // For everything else, return NODE_ACCESS_IGNORE
  return NODE_ACCESS_IGNORE;
}


/**
 * Form to set the default version for Raptor articles.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 * @return array $form
 *   Form array.
 */
function raptor_version_form($form, &$form_state) {

  list($options, $default_value) = get_raptor_versions_default();

  if ($version = get_raptor_version_from_session()) {
    $default_value = $version;
  }

  $form['raptor_versions'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => $default_value,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Get the Raptor version options that are visible to the current user as well as the default one for him.
 */
function get_raptor_versions_default() {
  $options = array();
  $vid = taxonomy_vocabulary_machine_name_load("raptor_versions")->vid;
  $terms = taxonomy_get_tree($vid, 0, NULL, TRUE);
  $default_value = '';

  // Get the options of the select dropdown.
  if (sizeof($terms) > 0) {
    foreach ($terms as $term) {
      // If Raptor Version is not accessible, then skip it.
      if (!is_raptor_version_accessible($term)) {
        continue;
      }
      $options[$term->tid] = $term->name;

      // Set this as the default version in case a default is not set already.
      $default_value = $term->tid;
    }
  }
  return array($options, $default_value);
}


/**
 * Define a submit function that drupal will automatically call when submit is pressed (and all validators pass).
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function raptor_version_form_submit($form, &$form_state) {
  set_raptor_version_in_session($form_state['values']['raptor_versions']);
}


/**
 * Menu callback
 *
 * @param stdClass $node
 *   Node object
 */
function nodes_versions($node) {
  if (isset($_SESSION['version']['Raptor'])) {
    module_load_include('inc', 'versioning_article', 'Article.class');
    $article = new Article($node);
    $session_redirect = $article->redirectBasedOnSession($_SESSION['version']['Raptor']);
    if ($session_redirect) {
      $path = 'node/' . $session_redirect;
      drupal_goto($path);
    }
    else {
      drupal_set_message('Page not found.');
      drupal_goto();
    }
  }
}


/**
 * Set Raptor version in the SESSION.
 *
 * @param string $version
 *   Raptor version.
 */
function set_raptor_version_in_session($version) {
  $_SESSION['version']['Raptor'] = $version;
}


/**
 * Get the Raptor version from the SESSION.
 *
 * @return string $version
 *   Raptor version.
 */
function get_raptor_version_from_session() {
  $version = !empty($_SESSION['version']['Raptor']) ? $_SESSION['version']['Raptor'] : '';
  return $version;
}


/**
 * Get the default Raptor version.
 *
 * @return string $version
 *   Default Raptor version.
 */
function get_default_raptor_version() {
  // If the version already exists in the SESSION, return it.
  if ($version = get_raptor_version_from_session()) {
    // Make sure that this term is still accessible for the user.
    $term = taxonomy_term_load($version);

    // If the Raptor version is accessible, then return the version number.
    if (is_raptor_version_accessible($term)) {
      return $version;
    }
  }

  // Go through all the versions and select the last one.
  list($options, $version) = get_raptor_versions_default();
  set_raptor_version_in_session($version);
  return $version;
}


/**
 * Returns if the Raptor version is accessible for the current user.
 *
 * @param object $term
 *   Taxonomy term object corresponding to the Raptor version.
 * @return bool $accessible
 *   TRUE if accessible, FALSE otherwise.
 */
function is_raptor_version_accessible($term) {
  // Get the Published field.
  $field_published = field_get_items('taxonomy_term', $term, 'field_published');
  $field_published = $field_published[0]['value'];
  if (!$field_published) {
    // The version is unpublished. See if the user has right to access articles of unpublished version.
    if (!user_access('access raptor articles unpublished versions')) {
      return FALSE;
    }
  }

  // Version is published.
  return TRUE;
}


function versioning_article_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-search-raptor-articles-page') {
    // Set the version options so that only the accessible ones are visible.
    $tids = array();
    foreach ($form['field_versions']['#options'] as $tid => $value) {
      if (is_numeric($tid)) {
        $tids[] = $tid;
      }
    }
    // $terms will contain all the taxonomy term versions that are accessible by the current user.
    $terms = array();
    if (sizeof($tids)) {
      $all_terms = taxonomy_term_load_multiple($tids);
      foreach ($all_terms as $tid => $term) {
        if (is_raptor_version_accessible($term)) {
          $terms[$tid] = $term;
        }
      }
    }
    // Remove all the version terms that are not in $terms array since they are not accessible by the current user.
    foreach ($form['field_versions']['#options'] as $tid => $value) {
      if (is_numeric($tid)) {
        if (!in_array($tid, array_keys($terms))) {
          unset($form['field_versions']['#options'][$tid]);
        }
      }
    }

    if (empty($form_state['view']->exposed_input['field_versions'])) {
      // Set the default value of the Versions exposed filter.
      $version = get_default_raptor_version();
      $form_state['input']['field_versions'] = $version;
    }

    // Add a submit handler to set the Raptor version when the form is submitted.
    $form['#submit'][] = 'versioning_article_views_exposed_form_search_raptor_articles_page_submit';
  }
}

function versioning_article_views_exposed_form_search_raptor_articles_page_submit($form, &$form_state) {
  $version = $form_state['values']['field_versions'];
  set_raptor_version_in_session($version);
}