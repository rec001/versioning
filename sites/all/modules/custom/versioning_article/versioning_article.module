<?php
/**
 * @file
 *   Callback function for customizing article.
 */


/**
 * Implements hook_form_alter().
 */
function versioning_article_form_alter(&$form, &$form_state, $form_id) {

  $args = arg();
  if ($form_id == 'raptor_article_node_form') {
    module_load_include('inc', 'versioning_article', 'ArticleForm.class');
    $articleForm = new ArticleForm($form);
    if (!empty($args[2]) && $args[2] == 'clone') {
      // Node is being cloned.
      $articleForm->alterArticleForm(TRUE);
    }
    else {
      // Node is being inserted, and not cloned.
      $articleForm->alterArticleForm(FALSE);
    }
    $form = $articleForm->getForm();
  }

}


/**
 * Custom validate handler for the article clone form.
 *
 * If the Version field is set to Defined and both Min Version and Max Version fields are set to something other than
 * None, then make sure that Max Version > Min Version.
 */
function versioning_article_validate($form, &$form_state) {
  module_load_include('inc', 'versioning_article', 'ArticleForm.class');
  $articleForm = new ArticleForm($form, $form_state);
  $errors = $articleForm->validateArticleCloneForm();
  $form_state = $articleForm->getFormState();

  foreach ($errors as $error) {
    form_set_error($error[0], $error[1]);
  }
}


/**
 * Implements hook_node_insert().
 */
function versioning_article_node_insert($node) {

  if ($node->type != 'raptor_article') {
    return;
  }

  module_load_include('inc', 'versioning_article', 'Article.class');
  $article = new Article($node);

  $arg = arg();
  // If the current article is not being cloned, then set its base article id to be the same as its nid.
  if (!empty($arg[2]) && $arg[2] != 'clone') {

    // Set the base article id to be the same as the current node id.
    $article->setBaseArticleId($node->nid);

    // Save the node. This shouldn't be a recursive call since we are updating the node and not inserting it.
    $node = $article->getArticle();
    field_attach_update('node', $node);
  }

  // If the new node is published and the Version field is set to Defined then
  // Take the Min Version of the new node. Set this value to be the Max version of the node that we are cloning.
  // Save the old node. This way the Min Version of the new node = Max Version of the old node.
  if (($original_nid = $article->getCloneFromOriginalArticleId()) && ($article->getVersionField() == 'defined') &&
    $article->isPublished()
  ) {

    // Get the min version of the new node.
    $min_version_tid = $article->getMinVersionTermId();

    // Get the base node.
    $original_node = node_load($original_nid);
    $originalArticle = new Article($original_node);

    // Set the max version of the original node to be the min version of the new node.
    $originalArticle->setMaxVersionTermId($min_version_tid);

    // Save the original node.
    $original_node = $originalArticle->getArticle();
    node_save($original_node);
  }
}